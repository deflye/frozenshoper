import logging
import asyncio
import aiohttp
import aiosqlite
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router
from aiogram.filters import Command
import uuid
from aiogram.client.default import DefaultBotProperties

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "7782237361:AAHkPxLuwyxMujNNXCVoaI4LUIBWAuVuC98"
CRYPTO_PAY_TOKEN = "422558:AAGn5BqvTaiWcl9dVI698fq5pM1lnc3vmue"
CRYPTO_API_URL = "https://pay.crypt.bot/api"
DB_PATH = os.getenv("DB_PATH", "/tmp/users.db")  # –ø—É—Ç—å –¥–ª—è Scalingo

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)
logging.basicConfig(level=logging.INFO)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS purchases (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                product TEXT,
                price REAL,
                quantity INTEGER
            )
        """)
        await db.commit()

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
def get_main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üì¶ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="all_categories")
    kb.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    kb.button(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")
    return kb.as_markup()

# === –ö–ê–¢–ï–ì–û–†–ò–ò ===
@router.callback_query(F.data == "all_categories")
async def categories(call: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="Kleinanzeigen", callback_data="kleinanzeigen")
    kb.button(text="–ú–∞–Ω—É–∞–ª—ã", callback_data="manuals")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())

# === –¢–û–í–ê–†–´ –í Kleinanzeigen ===
@router.callback_query(F.data == "kleinanzeigen")
async def show_item(call: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–∞–º–æ—Ä–µ–≥ Germany –Ω–æ–º–µ—Ä 7$", callback_data="buy_germany")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="all_categories")
    await call.message.edit_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=kb.as_markup())

# === –¢–û–í–ê–†–´ –í –ú–ê–ù–£–ê–õ–ê–• ===
@router.callback_query(F.data == "manuals")
async def show_manual(call: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="–ö—É–ø–∏—Ç—å –∑–∞ 200$", callback_data="buy_manual")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="all_categories")
    await call.message.edit_text(
        "üìÉ –¢–æ–≤–∞—Ä: –û–±—Ö–æ–¥ —Ñ—Ä–æ–¥–∞ Kleinanzeigen\n"
        "üí∞ –¶–µ–Ω–∞: 200$\n"
        "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–¥—Ä–æ–±–Ω—ã–π –º–∞–Ω—É–∞–ª –ø–æ –æ–±—Ö–æ–¥—É –∞–Ω—Ç–∏—Ñ—Ä–æ–¥–∞ Kleinanzeigen.",
        reply_markup=kb.as_markup()
    )

# === –í–´–ë–û–† –ö–û–õ-–í–ê –î–õ–Ø GERMANY ===
@router.callback_query(F.data == "buy_germany")
async def quantity_select(call: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for qty in [3, 4, 5, 10]:
        kb.button(text=str(qty), callback_data=f"pay_germany_{qty}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="kleinanzeigen")
    await call.message.edit_text(
        "üìÉ –¢–æ–≤–∞—Ä: –°–∞–º–æ—Ä–µ–≥ Germany –Ω–æ–º–µ—Ä\n"
        "üí∞ –¶–µ–Ω–∞: 7$ \n"
        "üìÉ –û–ø–∏—Å–∞–Ω–∏–µ: –°–∞–º–æ—Ä–µ–≥ —Å –≥–µ—Ä–º–∞–Ω—Å–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. cookie –≤ —Ñ–æ—Ä–º–∞—Ç–µ .json\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:",
        reply_markup=kb.as_markup()
    )

# === –û–ü–õ–ê–¢–ê GERMANY ===
@router.callback_query(F.data.startswith("pay_germany_"))
async def pay_crypto(call: types.CallbackQuery):
    qty = int(call.data.split("_")[-1])
    amount = 7 * qty
    unique_id = str(uuid.uuid4())[:7]
    payload = f"{call.from_user.id}:germany:{unique_id}"

    async with aiohttp.ClientSession() as session:
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        json_data = {
            "asset": "USDT",
            "amount": str(amount),
            "description": f"–ü–æ–∫—É–ø–∫–∞: Germany Number x{qty} (ID: {unique_id})",
            "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            "payload": payload
        }
        async with session.post(f"{CRYPTO_API_URL}/createInvoice", headers=headers, json=json_data) as resp:
            result = await resp.json()
            if "result" not in result:
                await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")
                return

            invoice = result['result']
            kb = InlineKeyboardBuilder()
            kb.button(text="üí≥ –û–ü–õ–ê–¢–ò–¢–¨", url=invoice['pay_url'])
            kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="kleinanzeigen")
            await call.message.answer(
                f"üí∞ –ü–æ–∫—É–ø–∫–∞ Germany x{qty}\n"
                f"üíµ –°—É–º–º–∞: {amount}$\n"
                f"üßæ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {unique_id}",
                reply_markup=kb.as_markup()
            )
            asyncio.create_task(wait_and_check_payment(invoice['invoice_id'], call.from_user.id, "–°–∞–º–æ—Ä–µ–≥ Germany Number", 7, qty))

# === –û–ü–õ–ê–¢–ê MANUAL ===
@router.callback_query(F.data == "buy_manual")
async def pay_manual(call: types.CallbackQuery):
    amount = 200
    unique_id = str(uuid.uuid4())[:7]
    payload = f"{call.from_user.id}:manual:{unique_id}"

    async with aiohttp.ClientSession() as session:
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        json_data = {
            "asset": "USDT",
            "amount": str(amount),
            "description": f"–ü–æ–∫—É–ø–∫–∞: –û–±—Ö–æ–¥ —Ñ—Ä–æ–¥–∞ (ID: {unique_id})",
            "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            "payload": payload
        }
        async with session.post(f"{CRYPTO_API_URL}/createInvoice", headers=headers, json=json_data) as resp:
            result = await resp.json()
            if "result" not in result:
                await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")
                return

            invoice = result['result']
            kb = InlineKeyboardBuilder()
            kb.button(text="üí≥ –û–ü–õ–ê–¢–ò–¢–¨", url=invoice['pay_url'])
            kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="manuals")
            await call.message.answer(
                f"üí∞ –ü–æ–∫—É–ø–∫–∞: –û–±—Ö–æ–¥ —Ñ—Ä–æ–¥–∞ Kleinanzeigen\n"
                f"üíµ –°—É–º–º–∞: 200$\n"
                f"üßæ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {unique_id}",
                reply_markup=kb.as_markup()
            )
            asyncio.create_task(wait_and_check_payment(invoice['invoice_id'], call.from_user.id, "–û–±—Ö–æ–¥ —Ñ—Ä–æ–¥–∞ Kleinanzeigen", 200, 1))

# === –ü–†–û–í–ï–†–ö–ê –û–ü–õ–ê–¢–´ ===
async def wait_and_check_payment(invoice_id, user_id, product_name, price, quantity):
    await asyncio.sleep(120)
    async with aiohttp.ClientSession() as session:
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        async with session.post(f"{CRYPTO_API_URL}/getInvoice", headers=headers, json={"invoice_ids": [invoice_id]}) as resp:
            result = await resp.json()
            if result.get("result"):
                invoice = result["result"][0]
                if invoice.get("status") == "paid":
                    async with aiosqlite.connect(DB_PATH) as db:
                        await db.execute("""
                            INSERT INTO purchases (user_id, product, price, quantity)
                            VALUES (?, ?, ?, ?)
                        """, (user_id, product_name, price, quantity))
                        await db.commit()

# === –ü–†–û–§–ò–õ–¨ ===
@router.callback_query(F.data == "profile")
async def profile(call: types.CallbackQuery):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT product, price, quantity FROM purchases WHERE user_id = ?", (call.from_user.id,))
        rows = await cursor.fetchall()

    if not rows:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫."
    else:
        total = sum(price * qty for _, price, qty in rows)
        purchases = "\n".join([f"üîπ {prod} x{qty} ‚Äî {price * qty}$" for prod, price, qty in rows])
        text = f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n–ò–º—è: {call.from_user.first_name}\n\n<b>üõí –ü–æ–∫—É–ø–∫–∏:</b>\n{purchases}\n\nüí∞ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {total}$"

    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    await call.message.edit_text(text, reply_markup=kb.as_markup())

# === –ò–ù–§–û ===
@router.callback_query(F.data == "info")
async def info(call: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    await call.message.edit_text("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ ‚Äî @dmitriyutkjn", reply_markup=kb.as_markup())

# === –ù–ê–ó–ê–î ===
@router.callback_query(F.data == "back_to_main")
async def back(call: types.CallbackQuery):
    await call.message.edit_text("üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# === START ===
@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# === RUN ===
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
